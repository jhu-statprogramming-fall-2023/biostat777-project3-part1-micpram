[{"path":[]},{"path":[]},{"path":"/articles/example.html","id":"question-what-is-the-95-confidence-interval-and-mean-number-of-refugees-across-the-us-canada-from-2019-to-2022","dir":"Articles","previous_headings":"Refugee Population Data from TidyTuesday","what":"Question: What is the 95% confidence interval and mean number of refugees across the US & Canada from 2019 to 2022?","title":"Example Analysis","text":"","code":"## Data is from TidyTuesday and focuses on refugee population and country of asylum data. library(tidyverse) #> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── #> ✔ forcats 1.0.0     ✔ stringr 1.5.1 #> ✔ readr   2.1.4     ✔ tibble  3.2.1 #> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── #> ✖ dplyr::filter() masks stats::filter() #> ✖ dplyr::lag()    masks stats::lag() #> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors library(refugees) #>  #> Attaching package: 'refugees' #>  #> The following object is masked from 'package:tidyr': #>  #>     population populations <- refugees::population populations <- filter(populations, year >= 2019) head(populations) #> # A tibble: 6 × 16 #>    year coo_name    coo   coo_iso coa_name coa   coa_iso refugees asylum_seekers #>   <dbl> <chr>       <chr> <chr>   <chr>    <chr> <chr>      <dbl>          <dbl> #> 1  2019 Afghanistan AFG   AFG     Afghani… AFG   AFG            0              0 #> 2  2019 Benin       BEN   BEN     Afghani… AFG   AFG            0              5 #> 3  2019 Iran (Isla… IRN   IRN     Afghani… AFG   AFG           36             25 #> 4  2019 Pakistan    PAK   PAK     Afghani… AFG   AFG        72191            138 #> 5  2019 Türkiye     TUR   TUR     Afghani… AFG   AFG            0             79 #> 6  2019 Algeria     ALG   DZA     Albania  ALB   ALB            0              0 #> # ℹ 7 more variables: returned_refugees <dbl>, idps <dbl>, returned_idps <dbl>, #> #   stateless <dbl>, ooc <dbl>, oip <dbl>, hst <dbl>"},{"path":[]},{"path":"/articles/example.html","id":"population-csv","dir":"Articles","previous_headings":"","what":"population.csv","title":"Example Analysis","text":"","code":"summary <- populations %>%   group_by(coo_name) %>%   summarise(Sample_Mean = mean(refugees, na.rm = TRUE))  top_countries_mean <- summary %>%   arrange(desc(Sample_Mean)) %>%   head(10)   top_countries_mean #> # A tibble: 10 × 2 #>    coo_name               Sample_Mean #>    <chr>                        <dbl> #>  1 Syrian Arab Rep.            55348. #>  2 South Sudan                 42041. #>  3 Afghanistan                 39694. #>  4 Ukraine                     34419. #>  5 Myanmar                     28527. #>  6 Central African Rep.        12286. #>  7 Dem. Rep. of the Congo       8900. #>  8 Sudan                        8440. #>  9 Western Sahara               8075. #> 10 Somalia                      7907."},{"path":"/articles/example.html","id":"top-10-mean-number-of-refugees-by-country-of-origin","dir":"Articles","previous_headings":"population.csv","what":"Top-10 Mean Number of Refugees by Country of Origin","title":"Example Analysis","text":"","code":"plot <- ggplot(top_countries_mean, aes(x = coo_name, y = Sample_Mean)) +   geom_bar(stat = \"identity\", position = \"dodge\", alpha = 0.8) +   labs(     title = \"Top-10 Mean Number of Refugees by Country of Origin\",     subtitle = \"Data from 2019-2022\",     x = \"Country\",     y = \"Mean Number of Refugees\",     fill = \"Year\"   ) +   theme_light() +   coord_flip() +   facet_grid()  plot"},{"path":"/articles/example.html","id":"comparing-refugees-seeking-asylym-in-the-us-canada","dir":"Articles","previous_headings":"population.csv","what":"Comparing refugees seeking asylym in the US & Canada","title":"Example Analysis","text":"","code":"subset <- populations %>%   filter(coa_name == c(\"United States of America\", \"Canada\"))  #> Warning: There was 1 warning in `filter()`. #> ℹ In argument: `coa_name == c(\"United States of America\", \"Canada\")`. #> Caused by warning in `coa_name == c(\"United States of America\", \"Canada\")`: #> ! longer object length is not a multiple of shorter object length  ggplot(subset, aes(x = coa_name, y = refugees, fill=factor(year))) +   geom_bar(stat = \"identity\", position = \"dodge\", alpha = 0.8) +   labs(     title = \"Total Number of Refugees by Year Per Country\",     x = \"Country of Asylyum\",     y = \"Total Refugees\") +       theme_light() +     coord_flip() +     facet_grid()"},{"path":"/articles/example.html","id":"time-series-plot-of-total-refugees-by-year","dir":"Articles","previous_headings":"population.csv","what":"Time series plot of total refugees by year","title":"Example Analysis","text":"","code":"# Aggregate the total number of refugees by year total_refugees_by_year <- populations %>%   group_by(year) %>%   summarise(Total_Refugees = sum(refugees, na.rm = TRUE)) %>%   ungroup()  # Create a time series plot of total refugees by year ggplot(total_refugees_by_year, aes(x = year, y = Total_Refugees)) +   geom_line() +   labs(     title = \"Total Number of Refugees Over Time\",     x = \"Year\",     y = \"Total Refugees\") +     theme_light() +     facet_grid() #$ Calculate mean refugees for each year mean_refugees_by_year <- populations %>%   group_by(year) %>%   summarise(mean_refugees = mean(refugees, na.rm = TRUE))  ## Extract a vector of mean refugees for each year mean_refugees_vector <- map_dbl(unique(populations$year), ~ mean_refugees_by_year$mean_refugees[mean_refugees_by_year$year == .x])  ## Mean refugees for each year mean_refugees_vector #> [1] 3753.386 3762.857 3817.305 4960.039 5150.343  ## Calculate the overall mean of refugees overall_mean_refugees <- mean(populations$refugees, na.rm = TRUE)  ## Subtract the overall mean from each yearly mean using map2() results <- map2(mean_refugees_by_year$mean_refugees, overall_mean_refugees, `-`)  ## Difference between refugee mean per year and overall mean results #> [[1]] #> [1] -558.3215 #>  #> [[2]] #> [1] -548.8513 #>  #> [[3]] #> [1] -494.4026 #>  #> [[4]] #> [1] 648.3314 #>  #> [[5]] #> [1] 838.6352 ## Calculating sample mean and standard deviation in order to calculate the 95% confidence interval ## x = Vector of your choosing made of any combination of numerical values. In this case, it's the winner's marathon times. x <- (population$refugees) ## Calculate the sample mean or average of values in the vector x sample_mean(x) #> [1] 5556.693 ## Calculate the sample standard deviation sample_sd(x) #> [1] 67117.25 ## Calculate the confidence interval of the mean with consideration to marginal errors. Function produces the lower and upper bound of the mean. CI1(x) #> [1] 5186.481 5926.905 ## S3 class to produce a 95% confidence interval with lower and upper bounds. ## Used in order to track the function as rnorm produces values at random using the mean and standard deviation from the winning marathon times in hours ## Produces n values at random with a normal distribution to account for all data points in the winners dataset set.seed(111) x <- rnorm(n = nrow(population), mean = mean(population$refugees), sd = sd(population$refugees)) ## Constructor function of the confidence interval S3 class ## Prints each of the returns of the make_ci_class along with the respective value  obj <- make_ci_class(x) print(obj) #> ci_class object with observations # Modified confidence interval calculation with consideration to the S3 confidence interval class CI2(obj) #> [1] 5061.899 5803.059"},{"path":[]},{"path":[]},{"path":"/articles/example.html","id":"packages-functions","dir":"Articles","previous_headings":"population.csv","what":"Packages & Functions","title":"Example Analysis","text":"dplyr: summarise(), mean(), filter(), arrange(), group_by() purr: map_dbl(), map2() tidyr: tibble(), count(), filter(), arrange(), group_by() ggplot2: geom_bar(), geom_line(), `geom_point(), geom_point(), facet_grid()","code":""},{"path":[]},{"path":"/articles.html","id":"refugee-population-data-from-tidytuesday","dir":"","previous_headings":"Example Analysis","what":"Refugee Population Data from TidyTuesday","title":"Create a time series plot of total refugees by year","text":"{r setup, include=FALSE} knitr::opts_chunk$set(echo = TRUE) {r, include=FALSE} library(Project2) library(dplyr) library(ggplot2) library(lubridate) library(tidyr) library(purrr) {r, include=FALSE} ## List exported functions package exists(\"fn_cos\") exists(\"fn_sin\") exists(\"sample_mean\") exists(\"sample_sd\") exists(\"CI1\") exists(\"make_ci_class\") exists(\"print\") exists(\"CI2\")","code":""},{"path":[]},{"path":"/articles.html","id":"question-what-is-the-95-confidence-interval-and-mean-number-of-refugees-across-the-us--canada-from-2019-to-2022","dir":"","previous_headings":"Example Analysis > Refugee Population Data from TidyTuesday","what":"Question: What is the 95% confidence interval and mean number of refugees across the US & Canada from 2019 to 2022?","title":"Create a time series plot of total refugees by year","text":"```{r} ## Data TidyTuesday focuses refugee population country asylum data. library(tidyverse) library(refugees) populations <- refugees::population populations <- filter(populations, year >= 2019) head(populations) ```{r} plot <- ggplot(top_countries_mean, aes(x = coo_name, y = Sample_Mean)) + geom_bar(stat = “identity”, position = “dodge”, alpha = 0.8) + labs( title = “Top-10 Mean Number Refugees Country Origin”, subtitle = “Data 2019-2022”, x = “Country”, y = “Mean Number Refugees”, fill = “Year” ) + theme_light() + coord_flip() + facet_grid() plot ```{r} # Aggregate total number refugees year total_refugees_by_year <- populations %>% group_by(year) %>% summarise(Total_Refugees = sum(refugees, na.rm = TRUE)) %>% ungroup()","code":"### Data Dictionary  # `population.csv`  |variable          |class     |description       | |:-----------------|:---------|:-----------------| |year              |double    |The year.              | |coo_name          |character |Country of origin name.        | |coo               |character |Country of origin UNHCR code.   | |coo_iso           |character |Country of origin ISO code.  | |coa_name          |character |Country of asylum name.    | |coa               |character |Country of asylum UNHCR code.  | |coa_iso           |character |Country of asylum ISO code.    | |refugees          |double    |The number of refugees.   | |asylum_seekers    |double    |The number of asylum-seekers.  | |returned_refugees |double    |The number of returned refugees. | |idps              |double    |The number of internally displaced persons.     | |returned_idps     |double    |The number of returned internally displaced persons.  | |stateless         |double    |The number of stateless persons.  | |ooc               |double    |The number of others of concern to UNHCR.   | |oip               |double    |The number of other people in need of international protection.     | |hst               |double    |The number of host community members.     |   ```{r, message=FALSE} summary <- populations %>%   group_by(coo_name) %>%   summarise(Sample_Mean = mean(refugees, na.rm = TRUE))  top_countries_mean <- summary %>%   arrange(desc(Sample_Mean)) %>%   head(10)   top_countries_mean #### Time series plot of total refugees by year  ```{r} subset <- populations %>%   filter(coa_name == c(\"United States of America\", \"Canada\"))   ggplot(subset, aes(x = coa_name, y = refugees, fill=factor(year))) +   geom_bar(stat = \"identity\", position = \"dodge\", alpha = 0.8) +   labs(     title = \"Total Number of Refugees by Year Per Country\",     x = \"Country of Asylyum\",     y = \"Total Refugees\") +       theme_light() +     coord_flip() +     facet_grid()"},{"path":"/articles.html","id":null,"dir":"","previous_headings":"","what":"Create a time series plot of total refugees by year","title":"Create a time series plot of total refugees by year","text":"ggplot(total_refugees_by_year, aes(x = year, y = Total_Refugees)) + geom_line() + labs( title = “Total Number Refugees Time”, x = “Year”, y = “Total Refugees”) + theme_light() + facet_grid() {r} ## Calculating sample mean standard deviation order calculate 95% confidence interval ## x = Vector choosing made combination numerical values. case, winner's marathon times. x <- (population$refugees) ## Calculate sample mean average values vector x sample_mean(x) ## Calculate sample standard deviation sample_sd(x) ## Calculate confidence interval mean consideration marginal errors. Function produces lower upper bound mean. CI1(x) {r} ## S3 class produce 95% confidence interval lower upper bounds. ## Used order track function rnorm produces values random using mean standard deviation winning marathon times hours ## Produces n values random normal distribution account data points winners dataset set.seed(111) x <- rnorm(n = nrow(population), mean = mean(population$refugees), sd = sd(population$refugees)) ## Constructor function confidence interval S3 class ## Prints returns make_ci_class along respective value  obj <- make_ci_class(x) print(obj) # Modified confidence interval calculation consideration S3 confidence interval class CI2(obj)","code":"```{r} #$ Calculate mean refugees for each year mean_refugees_by_year <- populations %>%   group_by(year) %>%   summarise(mean_refugees = mean(refugees, na.rm = TRUE))  ## Extract a vector of mean refugees for each year mean_refugees_vector <- map_dbl(unique(populations$year), ~ mean_refugees_by_year$mean_refugees[mean_refugees_by_year$year == .x])  ## Mean refugees for each year mean_refugees_vector  ## Calculate the overall mean of refugees overall_mean_refugees <- mean(populations$refugees, na.rm = TRUE)  ## Subtract the overall mean from each yearly mean using map2() results <- map2(mean_refugees_by_year$mean_refugees, overall_mean_refugees, `-`)  ## Difference between refugee mean per year and overall mean results"},{"path":[]},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michael Ramirez. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ramirez M (2023). P3: Project 3 - R Package Website. R package version 0.0.0.1.","code":"@Manual{,   title = {P3: Project 3 - R Package Website},   author = {Michael Ramirez},   year = {2023},   note = {R package version 0.0.0.1}, }"},{"path":[]},{"path":"/example.html","id":"refugee-population-data-from-tidytuesday","dir":"","previous_headings":"Example Analysis","what":"Refugee Population Data from TidyTuesday","title":"Create a time series plot of total refugees by year","text":"{r setup, include=FALSE} knitr::opts_chunk$set(echo = TRUE) {r, include=FALSE} library(Project2) library(dplyr) library(ggplot2) library(lubridate) library(tidyr) library(purrr) {r, include=FALSE} ## List exported functions package exists(\"fn_cos\") exists(\"fn_sin\") exists(\"sample_mean\") exists(\"sample_sd\") exists(\"CI1\") exists(\"make_ci_class\") exists(\"print\") exists(\"CI2\")","code":""},{"path":[]},{"path":"/example.html","id":"question-what-is-the-95-confidence-interval-and-mean-number-of-refugees-across-the-us--canada-from-2019-to-2022","dir":"","previous_headings":"Example Analysis > Refugee Population Data from TidyTuesday","what":"Question: What is the 95% confidence interval and mean number of refugees across the US & Canada from 2019 to 2022?","title":"Create a time series plot of total refugees by year","text":"```{r} ## Data TidyTuesday focuses refugee population country asylum data. library(tidyverse) library(refugees) populations <- refugees::population populations <- filter(populations, year >= 2019) head(populations) ```{r} plot <- ggplot(top_countries_mean, aes(x = coo_name, y = Sample_Mean)) + geom_bar(stat = “identity”, position = “dodge”, alpha = 0.8) + labs( title = “Top-10 Mean Number Refugees Country Origin”, subtitle = “Data 2019-2022”, x = “Country”, y = “Mean Number Refugees”, fill = “Year” ) + theme_light() + coord_flip() + facet_grid() plot ```{r} # Aggregate total number refugees year total_refugees_by_year <- populations %>% group_by(year) %>% summarise(Total_Refugees = sum(refugees, na.rm = TRUE)) %>% ungroup()","code":"### Data Dictionary  # `population.csv`  |variable          |class     |description       | |:-----------------|:---------|:-----------------| |year              |double    |The year.              | |coo_name          |character |Country of origin name.        | |coo               |character |Country of origin UNHCR code.   | |coo_iso           |character |Country of origin ISO code.  | |coa_name          |character |Country of asylum name.    | |coa               |character |Country of asylum UNHCR code.  | |coa_iso           |character |Country of asylum ISO code.    | |refugees          |double    |The number of refugees.   | |asylum_seekers    |double    |The number of asylum-seekers.  | |returned_refugees |double    |The number of returned refugees. | |idps              |double    |The number of internally displaced persons.     | |returned_idps     |double    |The number of returned internally displaced persons.  | |stateless         |double    |The number of stateless persons.  | |ooc               |double    |The number of others of concern to UNHCR.   | |oip               |double    |The number of other people in need of international protection.     | |hst               |double    |The number of host community members.     |   ```{r, message=FALSE} summary <- populations %>%   group_by(coo_name) %>%   summarise(Sample_Mean = mean(refugees, na.rm = TRUE))  top_countries_mean <- summary %>%   arrange(desc(Sample_Mean)) %>%   head(10)   top_countries_mean #### Time series plot of total refugees by year  ```{r} subset <- populations %>%   filter(coa_name == c(\"United States of America\", \"Canada\"))   ggplot(subset, aes(x = coa_name, y = refugees, fill=factor(year))) +   geom_bar(stat = \"identity\", position = \"dodge\", alpha = 0.8) +   labs(     title = \"Total Number of Refugees by Year Per Country\",     x = \"Country of Asylyum\",     y = \"Total Refugees\") +       theme_light() +     coord_flip() +     facet_grid()"},{"path":"/example.html","id":null,"dir":"","previous_headings":"","what":"Create a time series plot of total refugees by year","title":"Create a time series plot of total refugees by year","text":"ggplot(total_refugees_by_year, aes(x = year, y = Total_Refugees)) + geom_line() + labs( title = “Total Number Refugees Time”, x = “Year”, y = “Total Refugees”) + theme_light() + facet_grid() {r} ## Calculating sample mean standard deviation order calculate 95% confidence interval ## x = Vector choosing made combination numerical values. case, winner's marathon times. x <- (population$refugees) ## Calculate sample mean average values vector x sample_mean(x) ## Calculate sample standard deviation sample_sd(x) ## Calculate confidence interval mean consideration marginal errors. Function produces lower upper bound mean. CI1(x) {r} ## S3 class produce 95% confidence interval lower upper bounds. ## Used order track function rnorm produces values random using mean standard deviation winning marathon times hours ## Produces n values random normal distribution account data points winners dataset set.seed(111) x <- rnorm(n = nrow(population), mean = mean(population$refugees), sd = sd(population$refugees)) ## Constructor function confidence interval S3 class ## Prints returns make_ci_class along respective value  obj <- make_ci_class(x) print(obj) # Modified confidence interval calculation consideration S3 confidence interval class CI2(obj)","code":"```{r} #$ Calculate mean refugees for each year mean_refugees_by_year <- populations %>%   group_by(year) %>%   summarise(mean_refugees = mean(refugees, na.rm = TRUE))  ## Extract a vector of mean refugees for each year mean_refugees_vector <- map_dbl(unique(populations$year), ~ mean_refugees_by_year$mean_refugees[mean_refugees_by_year$year == .x])  ## Mean refugees for each year mean_refugees_vector  ## Calculate the overall mean of refugees overall_mean_refugees <- mean(populations$refugees, na.rm = TRUE)  ## Subtract the overall mean from each yearly mean using map2() results <- map2(mean_refugees_by_year$mean_refugees, overall_mean_refugees, `-`)  ## Difference between refugee mean per year and overall mean results"},{"path":[]},{"path":[]},{"path":[]},{"path":"/index.html","id":"website-basics","dir":"","previous_headings":"Project2 Package","what":"Website basics","title":"Project 3 - R Package Website","text":"Package source: Package website: Changed website theme morph navigation bar height 100 pixels. Added table contents side bar. Specified font code set primary color theme. Reordered removed elements navigation bar. Added website designer footnote.","code":""},{"path":"/index.html","id":"package--website-creation","dir":"","previous_headings":"Project2 Package > Website basics","what":"Package & website creation:","title":"Project 3 - R Package Website","text":"Michael Ramirez mramir34@jhu.edu","code":""},{"path":"/index.html","id":"package-description","dir":"","previous_headings":"Project2 Package","what":"Package description","title":"Project 3 - R Package Website","text":"Project2 (Project 2: Create R Package) contains basic functions simple analysis.","code":""},{"path":[]},{"path":[]},{"path":"/index.html","id":"fn_cos-calculating-and-comparing-fn_cos--cos","dir":"","previous_headings":"Project2 Package > Examples","what":"fn_cos: Calculating and comparing fn_cos & cos","title":"Project 3 - R Package Website","text":"","code":"## Compute and compare fn_cos() and cos() ## x = the number to be transformed  ## k = number of terms to be used in the series expansion beyond the constant 1 ## Example: x is the number to be transformed with a total number of k terms to be used in the series expansion for cos.  x <- seq(-2 * pi, 2 * pi, length.out = 10) k <- c(1, 3, 5, 7, 9)  ## fn_cos() function applied to x and k cos_y1 <- sapply(k, function(k) sapply(x, function(x) fn_cos(x, k))) ## fn_cos() plot for each k  matplot(x, cos_y1, type = \"l\", lty = 1, col = 1:length(k),         xlab = \"x\", ylab = \"fn_cos(x)\",         main = \"fn_cos(x) for different k values\",         xlim = c(-2 * pi, 2 * pi), ylim = c(-2, 2)) legend(\"topright\", legend = paste(\"k =\", k), col = 1:length(k), lty = 1) }  ## cos() function applied to x and k cos_y2 <- sapply(k, function(k_val) cos(x * k_val)) ## cos() plot for each k matplot(x, cos_y2, type = \"l\", lty = 1, col = 1:length(k),         xlab = \"x\", ylab = \"cos(x)\",         main = \"cos(x) for different k values\",         xlim = c(-2 * pi, 2 * pi), ylim = c(-2, 2)) legend(\"topright\", legend = paste(\"k =\", k), col = 1:length(k), lty = 1)"},{"path":"/index.html","id":"fn_sin-calculating-and-comparing-fn_sin--sin","dir":"","previous_headings":"Project2 Package > Examples","what":"fn_sin: Calculating and comparing fn_sin & sin","title":"Project 3 - R Package Website","text":"","code":"## Compute and compare fn_sin() and sin() ## x = the number to be transformed  ## k = number of terms to be used in the series expansion beyond the constant 1 ## Example: x is the number to be transformed with a total number of k terms to be used in the series expansion for sine.  x <- seq(-2 * pi, 2 * pi, length.out = 10) k <- c(1, 3, 5, 7, 9)  ## fn_sin() function applied to x and k sin_y1 <- sapply(k, function(k) sapply(x, function(x) fn_sin(x, k))) ## fn_sin() plot for each k  matplot(x, sin_y1, type = \"l\", lty = 1, col = 1:length(k),         xlab = \"x\", ylab = \"fn_sin(x)\",         main = \"fn_sin(x) for different k values\",         xlim = c(-2 * pi, 2 * pi), ylim = c(-2, 2)) legend(\"topright\", legend = paste(\"k =\", k), col = 1:length(k), lty = 1)  ## sin() function applied to x and k sin_y2 <- sapply(k, function(k_val) sin(x * k_val)) ## sin() plot for each k  matplot(x, sin_y2, type = \"l\", lty = 1, col = 1:length(k),         xlab = \"x\", ylab = \"sin(x)\",         main = \"sin(x) for different k values\",         xlim = c(-2 * pi, 2 * pi), ylim = c(-2, 2)) legend(\"topright\", legend = paste(\"k =\", k), col = 1:length(k), lty = 1)"},{"path":"/reference/CI1.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate confidence interval — CI1","title":"Calculate confidence interval — CI1","text":"Calculate confidence interval","code":""},{"path":"/reference/CI1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate confidence interval — CI1","text":"","code":"CI1(x)"},{"path":"/reference/CI1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate confidence interval — CI1","text":"x Numeric vector compute confidence interval","code":""},{"path":"/reference/CI1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate confidence interval — CI1","text":"computed confidence interval vector containing lower upper bounds","code":""},{"path":"/reference/CI1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate confidence interval — CI1","text":"","code":"x <- c(1,2,3,4,4,5) CI1(x) #> [1] 1.621939 4.711394"},{"path":"/reference/CI2.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate S3 class 95% confidence interval, lower and upper bounds — CI2","title":"Calculate S3 class 95% confidence interval, lower and upper bounds — CI2","text":"Calculate S3 class 95% confidence interval, lower upper bounds","code":""},{"path":"/reference/CI2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate S3 class 95% confidence interval, lower and upper bounds — CI2","text":"","code":"CI2(x)"},{"path":"/reference/CI2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate S3 class 95% confidence interval, lower and upper bounds — CI2","text":"x Random numeric vector compute confidence interval","code":""},{"path":"/reference/CI2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate S3 class 95% confidence interval, lower and upper bounds — CI2","text":"Lower upper bounds 95% confidence intervals","code":""},{"path":"/reference/CI2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate S3 class 95% confidence interval, lower and upper bounds — CI2","text":"","code":"set.seed(1234) x <- rnorm(100) obj <- make_ci_class(x) print(obj) #> ci_class object with observations CI2(obj) #> [1] -0.35605755  0.04253406"},{"path":"/reference/fn_cos.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute cosine using truncated series expansion — fn_cos","title":"Compute cosine using truncated series expansion — fn_cos","text":"Compute cosine using truncated series expansion","code":""},{"path":"/reference/fn_cos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute cosine using truncated series expansion — fn_cos","text":"","code":"fn_cos(x, k)"},{"path":"/reference/fn_cos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute cosine using truncated series expansion — fn_cos","text":"x number cosine computation k Number terms beyond constant 1 series expansion","code":""},{"path":"/reference/fn_cos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute cosine using truncated series expansion — fn_cos","text":"computed cosine value","code":""},{"path":"/reference/fn_cos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute cosine using truncated series expansion — fn_cos","text":"","code":"fn_cos(x=0.5, k=10) #> [1] 0.8775826"},{"path":"/reference/fn_sin.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute sine using truncated series expansion — fn_sin","title":"Compute sine using truncated series expansion — fn_sin","text":"Compute sine using truncated series expansion","code":""},{"path":"/reference/fn_sin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute sine using truncated series expansion — fn_sin","text":"","code":"fn_sin(x, k)"},{"path":"/reference/fn_sin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute sine using truncated series expansion — fn_sin","text":"x number sine computation k Number terms beyond x term series expansion","code":""},{"path":"/reference/fn_sin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute sine using truncated series expansion — fn_sin","text":"computed sine value","code":""},{"path":"/reference/fn_sin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute sine using truncated series expansion — fn_sin","text":"","code":"fn_sin(x=0.5, k=5) #> [1] 0.4794255"},{"path":"/reference/make_ci_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor function for ci_class — make_ci_class","title":"Constructor function for ci_class — make_ci_class","text":"Constructor function ci_class","code":""},{"path":"/reference/make_ci_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor function for ci_class — make_ci_class","text":"","code":"make_ci_class(x)"},{"path":"/reference/make_ci_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor function for ci_class — make_ci_class","text":"x Random numeric vector compute confidence interval","code":""},{"path":"/reference/make_ci_class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor function for ci_class — make_ci_class","text":"computed constructor function","code":""},{"path":"/reference/make_ci_class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructor function for ci_class — make_ci_class","text":"","code":"set.seed(1234) x <- rnorm(100) obj <- make_ci_class(x)"},{"path":"/reference/print.html","id":null,"dir":"Reference","previous_headings":"","what":"Print ci_class — print","title":"Print ci_class — print","text":"Print ci_class","code":""},{"path":"/reference/print.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print ci_class — print","text":"","code":"print(x)"},{"path":"/reference/print.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print ci_class — print","text":"x Random numeric vector compute confidence interval","code":""},{"path":"/reference/print.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print ci_class — print","text":"Name class number observations S3 object","code":""},{"path":"/reference/print.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print ci_class — print","text":"","code":"#' set.seed(1234) x <- rnorm(100) obj <- make_ci_class(x) print(obj) #> ci_class object with observations"},{"path":"/reference/sample_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate sample mean — sample_mean","title":"Calculate sample mean — sample_mean","text":"Calculate sample mean","code":""},{"path":"/reference/sample_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate sample mean — sample_mean","text":"","code":"sample_mean(...)"},{"path":"/reference/sample_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate sample mean — sample_mean","text":"x Numeric vector compute mean","code":""},{"path":"/reference/sample_mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate sample mean — sample_mean","text":"computed sample mean","code":""},{"path":"/reference/sample_mean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate sample mean — sample_mean","text":"","code":"x <- c(1,2,3,4,4,5) sample_mean(x) #> Error in sample_mean(x): object 'x' not found"},{"path":"/reference/sample_sd.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate sample standard deviation — sample_sd","title":"Calculate sample standard deviation — sample_sd","text":"Calculate sample standard deviation","code":""},{"path":"/reference/sample_sd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate sample standard deviation — sample_sd","text":"","code":"sample_sd(x)"},{"path":"/reference/sample_sd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate sample standard deviation — sample_sd","text":"x Numeric vector compute standard deviation","code":""},{"path":"/reference/sample_sd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate sample standard deviation — sample_sd","text":"computed sample standard deviation","code":""},{"path":"/reference/sample_sd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate sample standard deviation — sample_sd","text":"","code":"x <- c(1,2,3,4,4,5) sample_sd(x) #> Error in sample_mean(x): object 'x' not found"}]
